@page "/"

<PageTitle>Inventory</PageTitle>

@using InventoryWebApp.Data
@inject InventoryItemService InventoryService

<h1>Inventory</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (inventory == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in inventory){   
                @if(item.Id != updating && item.Id != deleting){
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>@item.Quantity</td>
                        <td><button @onclick="()=>Updating(item)">Update</button></td>
                       <td><button @onclick="()=>Deleting(item)">Delete</button></td> 
                    </tr>
                }
                else if(item.Id == deleting){
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>@item.Quantity</td> 
                        <td><input placeholder="Delete Comment" @bind="deleteMessage"/> </td>
                        <td><button @onclick="()=>Delete(item)"> Confirm Delete</button></td>
                    </tr>
                }
                else if(item.Id == updating){
                    <tr>
                        <td>@item.Id</td>
                        <td><input @bind="updateName"/></td>
                        <td><input @bind="updateQuantity"/></td> 
                        <td><button @onclick="()=>SaveUpdate(item)">Save Update</button></td>
                    </tr> 
                }
            }
            <tr>
                <td>@InventoryService.NextId()</td>
                <td> <input @bind="newName"></td>
                <td> <input @bind="newQuantity"></td>
                <td><button @onclick="AddItem">Add</button></td>
            </tr>
        </tbody>
    </table>
}

@code {

    private int deleting = -1;
    private string? deleteMessage;
    private int updating = -1;
    private string? updateName;
    private int updateQuantity;

    private List<InventoryItem>? inventory;
    private string? newName;
    private int newQuantity;
    private async void AddItem(){
        if (!string.IsNullOrWhiteSpace(newName)){
            inventory = await InventoryService.AddAsync(new InventoryItem{Name = newName, Quantity = newQuantity});
            newQuantity = 0;
            newName = "";
            StateHasChanged();
        }
    }
    private void Updating(InventoryItem item){
        updateName = item.Name;
        updateQuantity = item.Quantity;
        updating = item.Id;
    }
    private async void SaveUpdate(InventoryItem item){
        //Add exception handling if have time
        inventory = await InventoryService.UpdateAsync(item, new InventoryItem{Name = updateName, Quantity = updateQuantity});
        updating = -1;
        StateHasChanged();
    }

    private void Deleting(InventoryItem item){
        deleting = item.Id;
    }

    private async void Delete(InventoryItem item){
        inventory = await InventoryService.DeleteAsync(item);
        deleteMessage = "";
        deleting = -1;
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await UpdateInventory();
    }
    private async Task UpdateInventory(){
        inventory = await InventoryService.GetInventoryAsync();
    }
}
